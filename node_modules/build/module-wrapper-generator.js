var _system = require('system'),
    _os = require('os');

function getName(namespace) {
    var index = namespace.lastIndexOf('.');
    return index != -1 ?
        namespace.substring(index + 1) :
        namespace;
}

function getNamespaceInitialization(namespace, options) {
    if (namespace.indexOf('.') === -1) {
        return _system.string.format("var ns = {0}.{1} = {0}.{1} || {};", GLOBAL, namespace);
    } else {
        var template = [
            "var nsi = '{0}'.split('.'), ns = window;",
            "for (var i= 0, n=nsi.length; i<n; i++) {",
            options.indent + "ns = ns[nsi[i]] = ns[nsi[i]] || {};",
            "}"
        ];
        return _system.string.format(template.join(options.EOL), namespace);
    }
}

function getGlobalReference(namespace) {
    return _system.string.format("{0}.{1}", GLOBAL, namespace);
}

var GLOBAL = 'window';

var GlobalGenerator = function () {
};

_system.extend(GlobalGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'global';
        },
        /**
         *
         * @param {Object} module
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                'if (window) {',
                '{0}',
                options.indent + 'factory({1});',
                '}'].join(options.EOL);

            // get global argument references
            var factoryArguments = _system.isNullOrUndefined(module.dependencies) ?
                [] :
                Object.getOwnPropertyNames(module.dependencies).map(function (dependencyName) {
                    return getGlobalReference(module.dependencies[dependencyName].global);
                }, this);
            factoryArguments.unshift('ns');

            // return formatted
            return _system.string.format(template,
                _system.string.indent(getNamespaceInitialization(module.name, options), 1, options.indent),
                factoryArguments.join(', '));
        }
    });

var AMDGenerator = function () {
};

_system.extend(AMDGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'amd';
        },
        /**
         *
         * @param {Object} module
         * @param {Array} module.dependencies
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                "if (typeof define === 'function' && define['amd']) {",
                options.indent + "define(['exports'{0}], factory);",
                '}'].join(options.EOL);

            // get global argument references
            var dependencies = null;
            if (!_system.isNullOrUndefined(module.dependencies)) {
                dependencies = Object.getOwnPropertyNames(module.dependencies).map(function (dependencyName) {
                    return _system.string.format('\'{0}\'', module.dependencies[dependencyName].amd);
                });
            }

            // return formatted
            return _system.string.format(template, dependencies ?
                ', ' + dependencies.join(', ') :
                '');
        }
    });

var ModuleWrapperGenerator = function (module, options) {
    if (_system.isNullOrUndefined(options)) {
        options = {};
    } else {
        options = _system.extend({}, options);
    }

    if (_system.isNullOrUndefined(options.indent)) {
        options.indent = '    ';
    }

    if (_system.isNullOrUndefined(options.EOL)) {
        options.EOL = _os.EOL;
    }

    if (_system.isNullOrUndefined(options.formats)) {
        options.formats = moduleFormatters.map(function (formatter) {
            return formatter.getName();
        });
    }


    this.module_ = module;
    this.options_ = options;
};

var moduleFormatters = [
    new AMDGenerator(),
    new GlobalGenerator()
];

_system.extend(ModuleWrapperGenerator.prototype,
    /**
     * @lends ModuleWrapperGenerator.prototype
     */
    {
        /**
         * The content that will be placed into the module
         * @param content
         * @return {*}
         */
        generate:function (writer) {
            var template = [
                '(function(factory) {',
                '{0}',
                '})(function({1}) {',
                '{2}',
                '});'].join(this.options_.EOL),
                contentIndent = 1;

            var factoryCalls = _system.string.indent(
                    this.generateFactoryCalls_(), 1, this.options_.indent),
                factoryArgs = this.generateFactoryArgs_();

            var content = _system.string.format(template, factoryCalls, factoryArgs, '<<CONTENT>>');

            // create environment wrapper
            var environment = this.generateEnvironmentWrapper_(this.module_.environment);
            if (environment) {
                content = _system.string.format(environment, _system.string.indent(content, 1, this.options_.indent));
                contentIndent++;
            }

            var contentParts = content.split('<<CONTENT>>');
            return {
                preAmble : contentParts[0].trim(),
                postAmble : contentParts[1],
                contentIndent : contentIndent
            };
        },
        generateEnvironmentWrapper_:function (environment) {
            var dependencies = environment && environment.dependencies;
            if (!dependencies) {
                return '';
            }

            dependencies = Array.isArray(dependencies) ? dependencies : [dependencies];
            if (!dependencies.length) {
                return '';
            }

            var callArgs = dependencies.map(function (dependency) {
                return  dependency.hasOwnProperty('name') ? dependency.name : String(dependency);
            });

            var funcArgs = dependencies.map(function (dependency) {
                var isNamed = dependency.hasOwnProperty('name');
                if (isNamed) {
                    return dependency.alias || dependency.name;
                }
                return String(dependency);
            });

            var template = [
                '(function({0}){',
                '{1}',
                '})({2});'];

            return _system.string.format(template.join(this.options_.EOL),
                funcArgs.join(', '), '{0}', callArgs.join(', '));
        },
        generateFactoryArgs_:function () {
            var dependencies = '';
            if (!_system.isNullOrUndefined(this.module_.dependencies)) {
                dependencies = ', ' + Object.getOwnPropertyNames(this.module_.dependencies).join(', ');
            }
            return getName(this.module_.name) + dependencies;
        },
        generateFactoryCalls_:function () {
            var formats = {};
            this.options_.formats.forEach(function (format) {
                formats[String(format).toLowerCase()] = true;
            });

            var output = '';
            moduleFormatters.forEach(function (formatter) {
                if (formats[formatter.getName()]) {
                    if (output) {
                        output += ' else ';
                    }
                    output += formatter.generateFactoryCall(this.module_, this.options_);
                }
            }, this);

            return output;
        }
    });

module.exports = ModuleWrapperGenerator;
