var _system = require('system'),
    _options = require('./module-options.js'),
    _path = require('path'),
    _build = require('./build'),
    _os = require('os'),
    _fs = require('fs'),
    _vm = require('vm');

function createPathSync(path) {
    if (!_fs.existsSync(path)) {
        var parent = _path.dirname(path);
        if (parent !== path) {
            createPathSync(parent);
        }
        _fs.mkdirSync(path);
    }
}

function writeFileSync(path, data) {
    createPathSync(_path.dirname(path));
    _fs.writeFileSync(path, data);
}

function ModuleBuilder(options) {
    this.options_ = _options.configure(options);
}

_system.extend(
    ModuleBuilder.prototype,
    /**
     * @lends ModuleBuilder.prototype
     */
    {
        buildFile:function (moduleFileName) {
            this.build(_vm.runInThisContext(
                _fs.readFileSync(moduleFileName)), moduleFileName);
        },
        build:function (module, moduleFileName) {
            // determine name from filename if none specified
            if (!module.name) {
                module = _system.extend({}, module);
                module.name = _path.basename(moduleFileName, _path.extname(moduleFileName));
            }

            this.module_ = module;

            var generator = new _build.ModuleGenerator(this.options_),
                basePath = _path.dirname(moduleFileName);

            // determine output parameters
            var srcOutput, mapOutput, cfgName = this.options_.configuration;
            if (cfgName) {
                var configuration = module.configuration && module.configuration[cfgName];
                if (configuration) {
                    srcOutput = String(configuration.srcOutput);
                    srcOutput = srcOutput ? srcOutput.replace('%module%', module.name) : '';
                    mapOutput = String(configuration.mapOutput);
                    mapOutput = mapOutput ? mapOutput.replace('%module%', module.name) : '';
                }
            }
            srcOutput = _path.join(basePath, srcOutput || module.name + '.js');
            mapOutput = _path.join(basePath, mapOutput || module.name + '.js.map');

            var output = generator.generate(module, basePath);
            if (this.options_.addSourceMapDirective) {
                var mapDirectivePath = _path.join(_path.relative(
                    _path.dirname(srcOutput),
                    _path.dirname(mapOutput)), _path.basename(mapOutput));
                output.src += _system.string.format('{0}//@ sourceMappingURL={1}', _os.EOL, mapDirectivePath);
            }

            // write output
            writeFileSync(srcOutput, output.src);
            writeFileSync(mapOutput, output.map);
        }
    });

module.exports = ModuleBuilder;