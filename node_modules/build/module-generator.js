var _system = require('system'),
    _sourceMap = require('source-map'),
    _path = require('path'),
    _fs = require('fs'),
    _options = require('./module-options'),
    WrapperGenerator = require('./module-wrapper-generator.js');

function ModuleGenerator(options) {
    this.options_ = _options.configure(options);
}

ModuleGenerator.ERROR_STRATEGY_THROW = 'THROW';
ModuleGenerator.ERROR_STRATEGY_TODO = 'TODO';
ModuleGenerator.ERROR_STRATEGY_IGNORE = 'IGNORE';

_system.extend(
    ModuleGenerator.prototype,
    /**
     * @lends ModuleGenerator.prototype
     */
    {
        handleReadError_ : function(fileName, e) {
            var message = _system.string.format("Could not read file: '{0}', please check the file exists.", fileName);
            console.warn(message);

            switch (this.options_.errorStrategy) {
                case ModuleGenerator.ERROR_STRATEGY_IGNORE:
                    return '';
                case ModuleGenerator.ERROR_STRATEGY_TODO:
                    return '// TODO: ' + message;
                default:
                    throw new Error(message);
            }
        },
        readFile:function (fileName) {
            try {
                return {
                    fileName : fileName,
                    content : String(_fs.readFileSync(fileName))
                };
            }
            catch (e) {
                return {
                    content : this.handleReadError_(fileName, e)
                }
            }
        },
        writeContent_:function (content, source, indent) {
            source = source && this.basePath_ ?
                _path.relative(this.basePath_, source) :
                source;

            var lines = content.split(/\r\n|\n/gi),
                lineStart = this.output_.length,
                lineIndex = 1,
                columnIndent = _system.string.padLeft('',
                    this.options_.indent, indent),
                column = columnIndent.length + 1;

            for (var i = 0, n = lines.length; i < n; i++, lineIndex++) {
                this.output_.push(columnIndent + lines[i]);
                if (source) {
                    this.sourceMapGenerator_.addMapping({
                        generated:{
                            line:lineStart + lineIndex,
                            column:column
                        },
                        original:{
                            line:lineIndex,
                            column:1
                        },
                        source:source
                    });
                }
            }
        },
        generateCore_:function (fileNames) {
            this.writeContent_(this.wrapper_.header, null, 0);
            if (fileNames) {
                fileNames.forEach(function (fileName) {
                    var data = this.readFile(fileName);
                    this.writeContent_(data.content, data.fileName,
                        this.wrapper_.contentIndent);
                }, this);
            }
            this.writeContent_(this.wrapper_.footer, null, 0);
        },
        generate:function (module, basePath) {
            try {
                this.module_ = module;

                // prepare module wrapper
                this.wrapper_ = new WrapperGenerator(module, this.options_)
                    .generate();

                // create source map generator
                var sourceMapOptions = { file:module.name + '.js' };
                if (basePath) {
                    sourceMapOptions.sourceRoot = 'file://' + basePath;
                }
                this.sourceMapGenerator_ = new _sourceMap.SourceMapGenerator(sourceMapOptions);

                // save base path (we always need to resolve back to relative paths anyway)
                this.basePath_ = basePath;

                // output
                this.output_ = [];

                // generate
                var files = module.files, resolver = basePath ?
                    function (fileName) {
                        return _path.resolve(basePath, fileName)
                    } :
                    function (fileName) {
                        return _path.resolve(fileName);
                    };

                this.generateCore_(files ? files.map(function (file) {
                    return resolver(file);
                }) : files);

                // return!!!
                return {
                    src:this.output_.join(this.options_.EOL),
                    map:this.sourceMapGenerator_.toString()
                };
            }
            finally {
                // clear state
                this.sourceMapGenerator_ = null;
                this.wrapper_ = null;
                this.output_ = [];
                this.basePath_ = null;

            }
        }

    });


module.exports = ModuleGenerator;