var _system = require('system'),
    WrapperGenerator = require('./module-wrapper-generator.js'),
    _sourceMap = require('source-map'),
    _path = require('path'),
    _fs = require('fs'),
    _os = require('os');

function ModuleGenerator(options) {
    if (_system.isNullOrUndefined(options)) {
        options = {};
    } else {
        options = _system.extend({}, options);
    }

    if (_system.isNullOrUndefined(options.indent)) {
        options.indent = '    ';
    }

    if (_system.isNullOrUndefined(options.EOL)) {
        options.EOL = _os.EOL;
    }

    this.options_ = options;
}

ModuleGenerator.ERROR_STRATEGY_THROW = 'THROW';
ModuleGenerator.ERROR_STRATEGY_TODO = 'TODO';
ModuleGenerator.ERROR_STRATEGY_IGNORE = 'IGNORE';

_system.extend(
    ModuleGenerator.prototype,
    /**
     * @lends ModuleGenerator.prototype
     */
    {
        readFile:function (fileName) {
            try {
                return String(_fs.readFileSync(fileName));
            }
            catch (e) {
                var message = _system.string.format("Could not read file: '{0}'.", fileName);
                console.warn(message);

                switch (this.options_.errorStrategy) {
                    case ModuleGenerator.ERROR_STRATEGY_IGNORE:
                        return '';
                    case ModuleGenerator.ERROR_STRATEGY_TODO:
                        return '// TODO: ' + message;
                    default:
                        throw new Error(message);
                }
            }
        },
        writeContent_:function (content, source, indent) {
            source = this.basePath_ ?
                _path.relative(source, this.basePath_) :
                source;

            var lines = content.split(/\r\n|\n/gi),
                lineStart = this.output_.length,
                lineIndex = 1,
                columnIndent = _system.string.padLeft('',
                    this.options_.indent, indent),
                column = columnIndent.length;

            for (var i = 0, n = lines.length; i < n; i++, lineIndex++) {
                this.output_.push(columnIndent + lines[i]);

                this.sourceMapGenerator_.addMapping({
                    generated:{
                        line:lineStart + lineIndex,
                        column:column
                    },
                    original:{
                        line:lineIndex,
                        column:1
                    },
                    source:source
                });
            }
        },
        generateCore_:function (fileNames) {
            this.writeContent_(this.wrapper_.header, '', 0);
            if (fileNames) {
                fileNames.forEach(function(fileName) {
                    var content = this.readFile(fileName);
                    this.writeContent_(content, fileName, this.wrapper_.contentIndent);
                }, this);
            }
            this.writeContent_(this.wrapper_.header, '', 0);
        },
        generate:function (module, basePath) {
            try {
                // prepare module wrapper
                this.wrapper_ = new WrapperGenerator(module, this.options_)
                    .generate();

                // create source map generator
                var sourceMapOptions = { file:module.name + 'js' };
                if (basePath) {
                    sourceMapOptions.sourceRoot = basePath;
                }
                this.sourceMapGenerator_ = new _sourceMap.SourceMapGenerator(sourceMapOptions);

                // save base path (we always need to resolve back to relative paths anyway)
                this.basePath_ = basePath;

                // output
                this.output_ = [];

                // generate
                var files = module.files, resolver = basePath ?
                    function (fileName) {
                        return _path.resolve(basePath, fileName)
                    } :
                    function (fileName) {
                        return _path.resolve(fileName);
                    };

                this.generateCore_(files ? files.map(function (file) {
                    return resolver(file);
                }) : files);

                // return!!!
                return {
                    src : this.output_.join(this.options.EOL),
                    map : this.sourceMapGenerator_.toSource()
                };
            }
            finally {
                // clear state
                this.sourceMapGenerator_ = null;
                this.wrapper_ = null;
                this.output_ = [];
                this.basePath_ = null;

            }
        }

    });


module.exports = ModuleGenerator;