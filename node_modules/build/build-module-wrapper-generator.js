var _system = require('system');

var GlobalGenerator = function () {
};

_system.extend(GlobalGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        /**
         *
         * @param {Object} module
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                'if (window) {',
                options.indent + '{0}',
                options.indent + 'factory({1}, factory);',
                '}'].join(options.newLine);

            // utility method for making global references
            function globalReference(propertyName) {
                return _system.string.format("window['{0}']", propertyName);
            }

            var exportReference = globalReference(module.name), factoryArguments = [
                exportReference
            ];

            // get global argument references
            if (!_system.isNullOrUndefined(module.dependencies)) {
                module.dependencies.forEach(function (dependency) {
                    factoryArguments.push(globalReference(dependency.module.global));
                });
            }

            // return formatted
            return _system.string.format(template,
                _system.string.format('{0} = {0} || {};', exportReference), factoryArguments.join(', '));
        }
    });

var AMDGenerator = function () {
};

_system.extend(AMDGenerator .prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        /**
         *
         * @param {Object} module
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                'if (window) {',
                options.indent + '{0}',
                options.indent + 'factory({1}, factory);',
                '}'].join(options.newLine);

            // utility method for making global references
            function globalReference(propertyName) {
                return _system.string.format("window['{0}']", propertyName);
            }

            var exportReference = globalReference(module.name), factoryArguments = [
                exportReference
            ];

            // get global argument references
            if (!_system.isNullOrUndefined(module.dependencies)) {
                module.dependencies.forEach(function (dependency) {
                    factoryArguments.push(globalReference(dependency.module.global));
                });
            }

            // return formatted
            return _system.string.format(template,
                _system.string.format('{0} = {0} || {};', exportReference), factoryArguments.join(', '));
        }
    });

var ModuleWrapperGenerator = function (module, options) {
    if (_system.isNullOrUndefined(options)) {
        options = {};
    }

    if (_system.isNullOrUndefined(options.indent)) {
        options.indent = '    ';
    }

    if (_system.isNullOrUndefined(options.newLine)) {
        options.newLine = '\r\n';
    }

    this.module_ = module;
    this.options_ = options;
};

_system.extend(ModuleWrapperGenerator.prototype,
    /**
     * @lends ModuleWrapperGenerator.prototype
     */
    {
        generate:function () {
            var amdGenerator = new GlobalGenerator();
            console.log(amdGenerator.generateFactoryCall(this.module_, this.options_));
        }
    });

module.exports = ModuleWrapperGenerator;
