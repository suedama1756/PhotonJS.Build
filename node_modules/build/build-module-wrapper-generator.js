var _system = require('system'),
    _os = require('os');

var GlobalGenerator = function () {
};

_system.extend(GlobalGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'global';
        },
        /**
         *
         * @param {Object} module
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                'if (window) {',
                options.indent + '{0}',
                options.indent + 'factory({1}, factory);',
                '}'].join(_os.EOL);

            // utility method for making global references
            function globalReference(propertyName) {
                return _system.string.format("window['{0}']", propertyName);
            }

            var exportReference = globalReference(module.name), factoryArguments = [
                exportReference
            ];

            // get global argument references
            if (!_system.isNullOrUndefined(module.dependencies)) {
                module.dependencies.forEach(function (dependency) {
                    factoryArguments.push(globalReference(dependency.module.global));
                });
            }

            // return formatted
            return _system.string.format(template,
                _system.string.format('{0} = {0} || {};', exportReference), factoryArguments.join(', '));
        }
    });

var AMDGenerator = function () {
};

_system.extend(AMDGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'amd';
        },
        /**
         *
         * @param {Object} module
         * @param {Array} module.dependencies
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                "if (typeof define === 'function' && define['amd']) {",
                options.indent + "define(['exports'{0}], factory);",
                '}'].join(_os.EOL);

            // get global argument references
            var dependencies = null;
            if (!_system.isNullOrUndefined(module.dependencies)) {
                dependencies = module.dependencies.map(function (dependency) {
                    return _system.string.format('\'{0}\'', dependency.module.amd);
                });
            }

            // return formatted
            return _system.string.format(template, dependencies ?
                ', ' + dependencies.join(', ') :
                '');
        }
    });

var ModuleWrapperGenerator = function (module, options) {
    if (_system.isNullOrUndefined(options)) {
        options = {};
    }

    if (_system.isNullOrUndefined(options.indent)) {
        options.indent = '    ';
    }

    if (_system.isNullOrUndefined(options.formats)) {
        options.formats = moduleFormatters.map(function(formatter) {
            return formatter.getName();
        });
    }

    this.module_ = module;
    this.options_ = options;
};

var moduleFormatters = [
    new AMDGenerator(),
    new GlobalGenerator()
];

_system.extend(ModuleWrapperGenerator.prototype,
    /**
     * @lends ModuleWrapperGenerator.prototype
     */
    {
        generate:function () {
            var template = [
                '(function(factory) {',
                '{0}',
                '})(function({1}) {',
                '    {2}',
                '});'].join(_os.EOL);

            var factoryCalls = _system.string.indent(
                    this.generateFactoryCalls_(), 1, this.options_.indent),
                factoryArgs = this.generateFactoryArgs_();

            return _system.string.format(template, factoryCalls, factoryArgs, '{0}');
        },
        generateFactoryArgs_ : function() {
            var dependencies = '';
            if (!_system.isNullOrUndefined(this.module_.dependencies)) {
                dependencies = ', ' + this.module_.dependencies.map(function(dependency) {
                    return dependency.name;
                }).join(', ');
            }
            return this.module_.name + dependencies;
        },
        generateFactoryCalls_ : function() {
            var formats = {};
            this.options_.formats.forEach(function(format) {
                formats[String(format).toLowerCase()] = true;
            });

            var output = '';
            moduleFormatters.forEach(function(formatter) {
                if (formats[formatter.getName()]) {
                    if (output) {
                        output += ' else ';
                    }
                    output += formatter.generateFactoryCall(this.module_, this.options_);
                }
            }, this);

            return output;
        }
    });

module.exports = ModuleWrapperGenerator;
