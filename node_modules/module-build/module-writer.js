var _system = require('system'),
    _os = require('os'),
    _string = require('system'),
    _options = require('./module-options'),
    _path = require('path'),
    _sourceMap = require('source-map');


/**
 *
 * @param {*} options
 * @constructor
 */
function ModuleWriter(options) {
    this.output_ = [];
    this.indent_ = 0;
    this.indentContent_ = '';
    this.options_ = _options.configure(options);
    this.sourceMapGenerator_ = new _sourceMap.SourceMapGenerator(this.options_.sourceMapOptions);
}

_system.extend(
    ModuleWriter.prototype,
    /**
     * @extends ModuleWriter.prototype
     */
    {
        increaseIndent : function(amount) {
            this.setIndent(this.getIndent() + (arguments.length ? amount : 1));
        },
        decreaseIndent : function(amount) {
            this.setIndent(this.getIndent() - (arguments.length ? amount : 1));
        },
        onIndentChanged_ : function() {
            this.indentContent_ = _system.string.padLeft('', this.options_.indent, this.indent_);
        },
        getIndent : function() {
            return this.indent_;
        },
        setIndent : function(value) {
            value = Number(value);
            if (isNaN(value) || value < 0) {
                throw new Error('Indent must be a number greater than zero.');
            }

            if (this.indent_ !== value)
            {
                this.indent_ = value;
                this.onIndentChanged_();
            }
        },
        toString : function() {
            return this.output_.join(this.options_.EOL);
        },
        getMap : function() {
            return this.sourceMapGenerator_.toString();
        },
        writeln:function (content, source) {
            source = source && this.options_.basePath ?
                _path.relative(this.options_.basePath, source) :
                source;

            var lines = content.split(/\r\n|\n/gi),
                lineStart = this.output_.length,
                lineIndex = 1,
                columnIndent = this.indentContent_,
                column = columnIndent.length + 1;

            for (var i = 0, n = lines.length; i < n; i++, lineIndex++) {
                this.output_.push(columnIndent + lines[i]);
                if (source) {
                    this.sourceMapGenerator_.addMapping({
                        generated:{
                            line:lineStart + lineIndex,
                            column:column
                        },
                        original:{
                            line:lineIndex,
                            column:1
                        },
                        source:source
                    });
                }
            }
        }

    });

module.exports = ModuleWriter;

