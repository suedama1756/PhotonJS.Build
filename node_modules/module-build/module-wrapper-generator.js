var _system = require('system'),
    _options = require('./module-options');

var GLOBAL = 'window';

function getName(namespace) {
    var index = namespace.lastIndexOf('.');
    return index != -1 ?
        namespace.substring(index + 1) :
        namespace;
}

function getExports(module) {
    var exports = module.exports;
    if (exports) {
        if (String(exports) === exports) {
            return {
                local : 'exports',
                global : exports
            }
        } else {
            var exportProperties = Object.getOwnPropertyNames(exports);
            if (exportProperties.length != 1) {
                throw new Error("export configuration is valid.");
            }

            var local = exportProperties[0];
            exports = exports[local];
            return {
                local : local,
                global : String(exports) === exports ? exports : exports.global
            }
        }
    }

    return {
        local : getName(module.name),
        global : module.name
    }
}

function getNamespaceInitialization(namespace, options) {
    if (namespace.indexOf('.') === -1) {
        return _system.string.format("var ns = {0}['{1}'] = {0}['{1}'] || {};", GLOBAL, namespace);
    } else {
        var template = [
            "var nsi = '{0}'.split('.'), ns = window;",
            "for (var i= 0, n=nsi.length; i<n; i++) {",
            options.indent + "ns = ns[nsi[i]] = ns[nsi[i]] || {};",
            "}"
        ];
        return _system.string.format(template.join(options.EOL), namespace);
    }
}

function getGlobalReference(namespace) {
    return _system.string.format("{0}['{1}']", GLOBAL, namespace);
}

var GlobalGenerator = function () {
};

_system.extend(GlobalGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'global';
        },
        /**
         *
         * @param {Object} module
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                'if (window) {',
                '{0}',
                options.indent + 'factory({1});',
                '}'].join(options.EOL);

            // get global argument references
            var factoryArguments = _system.isNullOrUndefined(module.dependencies) ?
                [] :
                Object.getOwnPropertyNames(module.dependencies)
                    .filter(function(dependencyName) {
                        return !isAnonymous(dependencyName);
                    })
                    .map(function (dependencyName) {
                        return getGlobalReference(module.dependencies[dependencyName].global);
                    }, this);
            factoryArguments.unshift('ns');

            // return formatted
            return _system.string.format(template,
                _system.string.indent(getNamespaceInitialization(getExports(module).global, options), 1, options.indent),
                factoryArguments.join(', '));
        }
    });

function isAnonymous(propertyName) {
    return propertyName === '<<anonymous>>';
}

var AMDGenerator = function () {
};

_system.extend(AMDGenerator.prototype,
    /**
     * @lends GlobalGenerator.prototype
     */
    {
        getName:function () {
            return 'amd';
        },
        /**
         *
         * @param {Object} module
         * @param {Array} module.dependencies
         * @param options
         */
        generateFactoryCall:function (module, options) {
            var template = [
                "if (typeof define === 'function' && define.amd) {",
                options.indent + "define(['exports'{0}], factory);",
                '}'].join(options.EOL);

            // get global argument references
            var dependencies = [], anonymousDependencies = [];
            if (!_system.isNullOrUndefined(module.dependencies)) {
                Object.getOwnPropertyNames(module.dependencies).forEach(function (dependencyName) {
                    var amd = module.dependencies[dependencyName].amd;
                    if (Array.isArray(amd)) {
                        if (isAnonymous(dependencyName)) {
                            anonymousDependencies = anonymousDependencies.concat(amd);
                        } else {
                            anonymousDependencies = anonymousDependencies.concat(amd.slice(1));
                            dependencies.push(amd[0]);
                        }
                    } else if (isAnonymous(dependencyName)) {
                        anonymousDependencies.push(amd);
                    } else {
                        dependencies.push(amd);
                    }
                });
            }
            dependencies = dependencies.concat(anonymousDependencies).map(function(dependency) {
                return _system.string.format('\'{0}\'', dependency);
            });

            // return formatted
            return _system.string.format(template, dependencies && dependencies.length ?
                ', ' + dependencies.join(', ') :
                '');
        }
    });

var ModuleWrapperGenerator = function (module, options) {
    this.options_ = options =
        _options.configure(options);

    if (_system.isNullOrUndefined(options.formats)) {
        options.formats = moduleFormatters.map(function (formatter) {
            return formatter.getName();
        });
    }

    this.module_ = module;
};

var moduleFormatters = [
    new AMDGenerator(),
    new GlobalGenerator()
];

_system.extend(ModuleWrapperGenerator.prototype,
    /**
     * @lends ModuleWrapperGenerator.prototype
     */
    {
        indent_:function(text, amount) {
            return _system.string.indent(text, amount, this.options_.indent,
                this.options_.EOL);
        },
        /**
         * The content that will be placed into the module
         * @param content
         * @return {*}
         */
        generate:function () {
            var template = [
                '(function(factory) {',
                '{0}',
                '})(function({1}) {',
                '{2}',
                '});'].join(this.options_.EOL),
                contentIndent = 1;

            var factoryCalls = _system.string.indent(
                    this.generateFactoryCalls_(), 1, this.options_.indent),
                factoryArgs = this.generateFactoryArgs_();

            var content = '<<CONTENT>>';

            var version = _options.getOption([this.options_, this.module_], 'version');
            if (version) {
                content = this.indent_(_system.string.format("{0}.version = '{1}';",
                    getExports(this.module_).local, String(version)), 1) + content;
            }

            var useStrict = _options.getOption([this.options_, this.module_], 'useStrict', true);
            if (useStrict) {
                content = this.indent_('"use strict";') + content;
            }

            content = _system.string.format(template, factoryCalls, factoryArgs, content);

            // create environment wrapper
            var environment = this.generateEnvironmentWrapper_(this.module_.environment);
            if (environment) {
                content = _system.string.format(environment, _system.string.indent(content, 1, this.options_.indent));
                contentIndent++;
            }

            var contentParts = content.split('<<CONTENT>>');
            return {
                header : contentParts[0].trim(),
                footer : contentParts[1].substring(this.options_.EOL.length),
                contentIndent : contentIndent
            };
        },
        generateEnvironmentWrapper_:function (environment) {
            var dependencies = environment && environment.dependencies;
            if (!dependencies) {
                return '';
            }

            dependencies = Array.isArray(dependencies) ? dependencies : [dependencies];
            if (!dependencies.length) {
                return '';
            }

            var callArgs = dependencies.map(function (dependency) {
                return  dependency.hasOwnProperty('name') ? dependency.name : String(dependency);
            });

            var funcArgs = dependencies.map(function (dependency) {
                var isNamed = dependency.hasOwnProperty('name');
                if (isNamed) {
                    return dependency.alias || dependency.name;
                }
                return String(dependency);
            });

            var template = [
                '(function({0}){',
                '{1}',
                '})({2});'];

            return _system.string.format(template.join(this.options_.EOL),
                funcArgs.join(', '), '{0}', callArgs.join(', '));
        },
        generateFactoryArgs_:function () {
            var dependencies = '';
            if (!_system.isNullOrUndefined(this.module_.dependencies)) {
                dependencies = Object.getOwnPropertyNames(this.module_.dependencies)
                    .filter(function(dependencyName) {
                        return !isAnonymous(dependencyName);
                    })
                    .join(', ');
                if (dependencies) {
                    dependencies = ', ' + dependencies;
                }
            }
            return getExports(this.module_).local + dependencies;
        },
        generateFactoryCalls_:function () {
            var formats = {};
            this.options_.formats.forEach(function (format) {
                formats[String(format).toLowerCase()] = true;
            });

            var output = '';
            moduleFormatters.forEach(function (formatter) {
                if (formats[formatter.getName()]) {
                    if (output) {
                        output += ' else ';
                    }
                    output += formatter.generateFactoryCall(this.module_, this.options_);
                }
            }, this);

            return output;
        }
    });

module.exports = ModuleWrapperGenerator;
