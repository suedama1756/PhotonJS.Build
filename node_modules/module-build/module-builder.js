var _system = require('system'),
    _options = require('./module-options.js'),
    _path = require('path'),
    _os = require('os'),
    _fs = require('fs'),
    _vm = require('vm'),
    ModuleGenerator = require('./module-generator.js');

function createPathSync(path) {
    if (!_fs.existsSync(path)) {
        var parent = _path.dirname(path);
        if (parent !== path) {
            createPathSync(parent);
        }
        _fs.mkdirSync(path);
    }
}

function writeFileSync(path, data) {
    createPathSync(_path.dirname(path));
    _fs.writeFileSync(path, data);
}

function ModuleBuilder(options) {
    this.options_ = _options.configure(options);
}

_system.extend(
    ModuleBuilder.prototype,
    /**
     * @lends ModuleBuilder.prototype
     */
    {
        buildFile:function (moduleFileName) {
            var module = _vm.runInThisContext(_fs.readFileSync(moduleFileName));
            if (typeof module === 'function') {
                module = module(this.options_.properties || {}, this.options_.extensions || {});
            }
            this.build(module, moduleFileName);

        },
        mergeConfiguration_:function () {
            var result = _system.extend({}, this.options_), configurationName = result.configuration, configuration;
            if (configurationName) {
                configuration = this.module_.configuration && this.module_.configuration[configurationName];
                if (configuration) {
                    Object.getOwnPropertyNames(configuration).forEach(function (propertyName) {
                        if (_system.isNullOrUndefined(result[propertyName])) {
                            result[propertyName] = configuration[propertyName];
                        }
                    });
                }
            }
            return result;
        },
        build:function (module, moduleFileName) {
            // automatically derive name from filename if no name has been specified
            if (!module.name) {
                module = _system.extend({}, module);
                module.name = _path.basename(moduleFileName,
                    _path.extname(moduleFileName));
            }
            this.module_ = module;

            var options = this.mergeConfiguration_(),
                generator = new ModuleGenerator(options),
                basePath = _path.dirname(moduleFileName),
                srcOutput = (String(options.srcOutput) || '').replace('%module%', module.name),
                mapOutput = (String(options.mapOutput) || '').replace('%module%', module.name);

            srcOutput = _path.resolve(basePath, srcOutput || module.name + '.js');
            mapOutput = _path.resolve(basePath, mapOutput || module.name + '.js.map');
            console.log('using path: ' + srcOutput);
            var output = generator.generate(module, basePath);
            if (this.options_.addSourceMapDirective) {
                var mapDirectivePath = _path.join(_path.relative(_path.dirname(srcOutput), _path.dirname(mapOutput)),
                    _path.basename(mapOutput));
                output.src += _system.string.format('{0}//@ sourceMappingURL={1}', _os.EOL, mapDirectivePath);
            }

            // write output
            writeFileSync(srcOutput, output.src);
            writeFileSync(mapOutput, output.map);

            return {
                srcOutput:srcOutput,
                mapOutput:mapOutput
            }
        }
    });

module.exports = ModuleBuilder;