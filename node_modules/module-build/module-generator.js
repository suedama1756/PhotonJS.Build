var _system = require('system'),
    _path = require('path'),
    _fs = require('fs'),
    _options = require('./module-options'),
    WrapperGenerator = require('./module-wrapper-generator.js'),
    ModuleWriter = require('./module-writer');

function ModuleGenerator(options) {
    this.options_ = _options.configure(options);
}

ModuleGenerator.ERROR_STRATEGY_THROW = 'THROW';
ModuleGenerator.ERROR_STRATEGY_TODO = 'TODO';
ModuleGenerator.ERROR_STRATEGY_IGNORE = 'IGNORE';

_system.extend(
    ModuleGenerator.prototype,
    /**
     * @lends ModuleGenerator.prototype
     */
    {
        handleReadError_ : function(fileName, e) {
            var message = _system.string.format("Could not read file: '{0}', error: '{1}', please check the file exists.",
                fileName, e);
            console.warn(message);

            switch (this.options_.errorStrategy) {
                case ModuleGenerator.ERROR_STRATEGY_IGNORE:
                    return '';
                case ModuleGenerator.ERROR_STRATEGY_TODO:
                    return '// TODO: ' + message;
                default:
                    throw new Error(message);
            }
        },
        readFile:function (fileName) {
            try {
                // read content and remove bom
                var content = String(_fs.readFileSync(fileName));
                if (/^\uFEFF/.test(content))
                {
                    content = content.replace(/^\uFEFF/, '');
                }

                return {
                    fileName : fileName,
                    content : content
                };
            }
            catch (e) {
                return {
                    content : this.handleReadError_(fileName, e)
                }
            }
        },
        generateCore_:function (files) {
            this.writer_.writeln(this.wrapper_.header);
            if (files) {
                this.writer_.increaseIndent(this.wrapper_.contentIndent);
                files.forEach(function (file) {
                    if (typeof file === 'function') {
                        file(this.writer_, this.module_);
                    }else {
                        var data = this.readFile(file);
                        this.writer_.writeln(data.content, data.fileName);
                    }
                }, this);
                this.writer_.decreaseIndent(this.wrapper_.contentIndent);
            }
            this.writer_.writeln(this.wrapper_.footer, null, 0);
        },
        generate:function (module, basePath) {
            try {
                this.module_ = module;

                // prepare module wrapper
                this.wrapper_ = new WrapperGenerator(module, this.options_)
                    .generate();

                // create source map generator
                var sourceMapOptions = { file:module.name + '.js' };
                if (basePath) {
                    sourceMapOptions.sourceRoot = this.options_.sourceMapRoot || 'file:///' + basePath.replace('\\', '//');
                }

                this.options_.sourceMapOptions = sourceMapOptions;
                this.options_.basePath = basePath;

                this.writer_ = new ModuleWriter(this.options_);

                // save base path (we always need to resolve back to relative paths anyway)
                this.basePath_ = basePath;

                // generate
                var files = module.files, resolver = basePath ?
                    function (fileName) {
                        return _path.resolve(basePath, fileName)
                    } :
                    function (fileName) {
                        return _path.resolve(fileName);
                    };

                this.generateCore_(files ? files.map(function (file) {
                    if (typeof file === 'function') {
                        return file;
                    }
                    return resolver(file);
                }, this) : files);

                // return!!!
                return {
                    src:this.writer_.toString(this.options_.EOL),
                    map:this.writer_.getMap()
                };
            }
            finally {
                // clear state
                this.sourceMapGenerator_ = null;
                this.wrapper_ = null;
                this.output_ = [];
                this.basePath_ = null;

            }
        }

    });


module.exports = ModuleGenerator;