var _fs = require('fs'),
    _path = require('path'),
    _system = require('system'),
    _events = require('events'),
    _sys = require('sys');

function DirectoryWatcher(path) {
    _events.EventEmitter.call(this);

    this.path_ = _path.normalize(_path.resolve(path));
    this.watcher_ = _fs.watch(this.path_,
        this.update_.bind(this));
    this.update_();
}

_sys.inherits(DirectoryWatcher, _events.EventEmitter);

_system.extend(
    DirectoryWatcher.prototype,
    /**
     * @lends DirectoryWatcher.prototype
     */
    {
        getPath:function () {
            return this.path_;
        },
        notify_:function (event, changes) {
            if (changes.length) {
                this.emit(event, changes);
            }
        },
        update_:function () {
            var newFileInfo = {},
                oldFileInfo = this.fileInfo_,
                completed = function () {
                    if (oldFileInfo) {
                        var deleted = [], created = [], modified = [];

                        _system.object.forEachOwnPropertyAndValue(oldFileInfo, function (propertyName) {
                            var newInfo = newFileInfo[propertyName];
                            if (newInfo) {
                                var oldInfo = oldFileInfo[propertyName];
                                if ((newInfo.mtime - oldInfo.mtime) || (newInfo.size - oldInfo.size)) {
                                    modified.push(propertyName);
                                }
                            } else {
                                deleted.push(propertyName);
                            }
                        });

                        _system.object.forEachOwnPropertyAndValue(newFileInfo, function (propertyName) {
                            if (!oldFileInfo[propertyName]) {
                                created.push(propertyName);
                            }
                        });

                        this.notify_('created', created);
                        this.notify_('deleted', deleted);
                        this.notify_('modified', modified);
                    }

                    this.fileInfo_ = newFileInfo;
                }.bind(this);

            _fs.readdir(this.path_, function (readDirErr, files) {
                if (!readDirErr) {
                    var fileCount = files.length;
                    files.forEach(function (file) {
                        _fs.stat(file, function (statErr, stat) {
                            if (!statErr) {
                                newFileInfo[_path.basename(file)] = {
                                    mtime:stat.mtime, isDirectory:stat.isDirectory(), size:stat.size
                                }
                            }
                            if (!--fileCount) {
                                completed();
                            }
                        });
                    });
                } else {
                    completed();
                }
            });
        }
    });