var _events = require('events'),
    _sys = require('sys'),
    _system = require('system'),
    _fs = require('fs'),
    _path = require('path'),
    _utility = require('./fwatch-utility'),
    DirectoryWatcher = require('./fwatch-directory-watcher');

function FileWatcher(baseDirectory) {
    _events.EventEmitter.call(this);

    this.directoryWatchers_ = {};
    this.baseDirectory_ = baseDirectory;
    this.changeHandler_ = this.changed_.bind(this);
}

_sys.inherits(FileWatcher, _events.EventEmitter);

_system.extend(
    FileWatcher.prototype,
    {
        watch: function(files) {
            _system.array.toArray(files).forEach(function(file) {
                file = _utility.resolveFullPath(this.baseDirectory_, file);

                var directory = _path.dirname(file),
                    directoryKey = _utility.getKeyForPath(directory);

                var watcher = this.directoryWatchers_[directoryKey];
                if (!watcher) {
                    watcher = this.directoryWatchers_[directoryKey] =
                        new DirectoryWatcher(directory);
                    watcher.on('change', this.changeHandler_);
                }

                watcher.addFiles(_path.basename(file));
            }, this);
        },
        unwatch : function(files) {

        },
        changed_ : function(fileNames) {
            this.emit("change", fileNames);
        }
    });

module.exports = FileWatcher;