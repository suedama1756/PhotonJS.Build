var _build = require('module-build'),
    _exec = require('child_process').exec,
    _path = require('path'),
    _system = require('system');

module.exports = function(grunt) {
    // Create a new task.
    grunt.registerMultiTask('module', 'Build module source files', function() {
        if (!this.target) {
            return;
        }

        var data = this.data, moduleFiles = data && data.jsm;
        if (!moduleFiles) {
           grunt.log.warn('No jsm specified for module task');
        }

        if (!Array.isArray(moduleFiles)) {
            moduleFiles = [moduleFiles];
        }

        var builder = new _build.ModuleBuilder(data.options);
        moduleFiles.forEach(function(moduleFile) {
            builder.buildFile(moduleFile);
        });
    });

    function getClosureOption(data, name, nativeName, isRequired) {
        var result = data && (data[name] || (data.options && data.options[nativeName]));
        if (!result && isRequired) {
            grunt.warn(_system.string.format('Missing required argument, task.{0}, or task.options["{1}"].', name, nativeName));
        }
        return result;
    }

    grunt.registerMultiTask('closureCompiler', 'Compile using Closure Compiler.', function() {
        var data = this.data,
            done = this.async(),
            command,
            closurePath,
            js,
            jsOutputFile;


        if (!(closurePath = data.closurePath || process.env.CLOSURE_PATH)) {
            grunt.warn('Missing path to Closure Compiler, either set env CLOSURE_PATH or the closurePath task property.');
            return false;
        }

        command = _system.string.format('java -jar "{0}"', _path.join(closurePath, 'compiler.jar'));

        // process js files
        js = grunt.file.expandFiles(getClosureOption(data, 'js', 'js', true));
        if (!js.length) {
            grunt.warn('At least one javascript file must be specified.');
            return false;
        }
        command += ' --js ' + js.map(function(fileName) { return _system.string.format('"{0}"', fileName); }).join(' ');

        // process output path
        if (!(jsOutputFile = getClosureOption(data, 'jsOutputFile', 'js-output-file', true))) {
            return false;
        }
        command += _system.string.format(' --js_output_file "{0}"', jsOutputFile);

        for (var option in data.options) {
            if (Array.isArray(data.options[option])) {
                command += ' --' + option + ' ' + data.options[option].join(' --' + option + ' ');
            } else {
                command += ' --' + option + ' ' + String(data.options[option]);
            }
        }

        // compile
        grunt.verbose.writeln('Executing command: ' + command);
        _exec(command, function(err, stdout) {
            if (err) {
                grunt.warn(err);
                done(false);
            }

            if (stdout) {
                grunt.verbose.writeln(stdout);
            }

            done();
        });
    });
};