var _os = require('os');

function toArray(obj) {
    if (Array.isArray(obj))
        return obj;
    var result = [];
    if (obj.hasOwnProperty("length")) {
        for (var i = 0, n = obj.length; i < n; i++) {
            if (obj.hasOwnProperty(i)) {
                result[i] = obj[i];
            }
        }
    }
    else {
        result[0] = obj;
    }

    return result;
}

function format(format /* arg1, arg2... */) {
    if (arguments.length === 0) {
        return undefined;
    }

    if (arguments.length === 1) {
        return format;
    }

    var args = toArray(arguments).slice(1);
    return format.replace(/\{\{|\}\}|\{(\d+)\}/g, function (m, n) {
        if (m === "{{") {
            return "{";
        }
        if (m === "}}") {
            return "}";
        }
        return args[n];
    });
}

function padLeft(text, padding, count) {
    var paddingText = '';
    for (var i=0; i<count; i++) {
        paddingText += padding;
    }
    return paddingText + text;
}

function padRight(text, padding, count) {
    return text + padLeft('', padding, count);
}

function indent(text, amount, indent, eol) {
    if (!indent) {
        indent += '\t';
    }
    if (!amount) {
        amount = 1;
    }
    if (!eol) {
        eol = _os.EOL;
    }

    var padding = '';
    for (var i = 0; i < amount; i++) {
        padding += indent;
    }

    return text.split(/\r\n|\n/gi).map(function (line) {
        return line ? padding + line : line;
    }).join(eol);
}


function isUndefined(obj) {
    return typeof obj === 'undefined';
}

function isNullOrUndefined(obj) {
    return obj === null || typeof obj === 'undefined';
}

function extend(target, source, filter) {
    for (var key in source) {
        if (!filter || filter(target, source, key)) {
            target[key] = source[key];
        }
    }
    return target;
}

function callback(callback /* args.. */) {
    if (callback) {
        callback.apply(toArray(arguments).slice(1));
    }
}

function forEachOwnProperty(obj, callback, thisObj) {
    Object.getOwnPropertyNames(obj).forEach(function (propertyName) {
        callback.call(this, propertyName, obj);
    }, thisObj);
}

function forEachOwnPropertyAndValue(obj, callback, thisObj) {
    Object.getOwnPropertyNames(obj).forEach(function (propertyName) {
        callback.call(this, propertyName, obj[propertyName], obj);
    }, thisObj);
}

exports.array = {
    toArray:toArray
};

exports.string = {
    format:format,
    indent:indent,
    padLeft : padLeft,
    paddingRight : padRight
};

exports.object = {
    forEachOwnProperty:forEachOwnProperty,
    forEachOwnPropertyAndValue : forEachOwnPropertyAndValue
};

exports.isUndefined = isUndefined;

exports.isNullOrUndefined = isNullOrUndefined;

exports.extend = extend;

exports.callback = callback;

