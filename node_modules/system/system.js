function toArray(obj) {
    if (Array.isArray(obj))
        return obj;
    var result = [];
    if (obj.hasOwnProperty("length")) {
        for (var i = 0, n = obj.length; i < n; i++) {
            if (obj.hasOwnProperty(i)) {
                result[i] = obj[i];
            }
        }
    }
    else {
        result[0] = obj;
    }

    return result;
}

function format(format /* arg1, arg2... */) {
    if (arguments.length === 0) {
        return undefined;
    }

    if (arguments.length === 1) {
        return format;
    }

    var args = toArray(arguments).slice(1);
    return format.replace(/\{\{|\}\}|\{(\d+)\}/g, function (m, n) {
        if (m === "{{") {
            return "{";
        }
        if (m === "}}") {
            return "}";
        }
        return args[n];
    });
}

function isUndefined(obj) {
    return typeof obj === 'undefined';
}

function isNullOrUndefined(obj) {
    return obj === null || typeof obj === 'undefined';
}

function extend(target, source, filter) {
    for (var key in source) {
        if (!filter || filter(target, source, key)) {
            target[key] = source[key];
        }
    }
    return target;
}

function callback(callback /* args.. */ ) {
    if (callback) {
        callback.apply(toArray(arguments).slice(1));
    }
}

exports.array = {
    toArray:toArray
};

exports.string = {
    format : format
};

exports.isUndefined = isUndefined;

exports.isNullOrUndefined = isNullOrUndefined;

exports.extend = extend;

exports.callback = callback;